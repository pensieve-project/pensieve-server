input {
    jdbc {
        jdbc_connection_string => "jdbc:cassandra://cassandra:9042/pensieve"
        jdbc_driver_library => "/usr/share/logstash/drivers/cassandrajdbc2.4.0.jar"
        jdbc_driver_class => "com.wisecoders.dbschema.cassandra.JdbcDriver"
        jdbc_user => "${CASSANDRA_USER}"
        jdbc_password => "${CASSANDRA_PASSWORD}"
        statement => "SELECT cast(themeId as text) as themeId, cast(authorId as text) as authorId, title, timeStamp FROM themes;"
        schedule => "* * * * *"
        tags => ["cassandra"]
    }

    jdbc {
        jdbc_connection_string => "jdbc:postgresql://postgres:5432/pensieveDatabase"
        jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        statement => "SELECT id, username FROM users;"
        schedule => "* * * * *"
        tags => ["postgres"]
    }

    jdbc {
        jdbc_connection_string => "jdbc:cassandra://cassandra:9042/pensieve"
        jdbc_driver_library => "/usr/share/logstash/drivers/cassandrajdbc2.4.0.jar"
        jdbc_driver_class => "com.wisecoders.dbschema.cassandra.JdbcDriver"
        jdbc_user => "${CASSANDRA_USER}"
        jdbc_password => "${CASSANDRA_PASSWORD}"
        statement => "SELECT cast(themeId as text) as themeId, cast(authorId as text) as authorId, cast(postId as text) as postId, text, timeStamp, location.latitude as latitude, location.longitude as longitude, location.placeName as placeName, cast(albumId as text) as albumId, likesCount, commentsCount FROM posts;"
        schedule => "* * * * *"
        tags => ["posts"]
    }
}

filter {
  if "cassandra" in [tags] {
    mutate {
        rename => { "title" => "themetitle" }
    }

    aggregate {
        task_id => "%{themeid}"
        code => "
            map['themetitle'] = event.get('themetitle');
        "
        map_action => "create"
    }
  }

  if "postgres" in [tags] {
    mutate {
      rename => { "id" => "authorid" }
      rename => { "username" => "authorusername" }
    }

    aggregate {
      task_id => "%{authorid}"
      code => "
          map['authorusername'] = event.get('authorusername');
      "
      map_action => "create"
    }

    mutate {
      add_field => { "[suggest][input]" => "%{authorusername}" }
    }
  }

  if "posts" in [tags] {
    mutate {
      add_field => {
          "[location][lat]" => "%{latitude}"
          "[location][lon]" => "%{longitude}"
      }
    }

    mutate {
      remove_field => ["latitude", "longitude"]
    }

    aggregate {
      task_id => "%{authorid}"
      code => "
          event.set('authorusername', map['authorusername']);
      "
      map_action => "update"
    }

    aggregate {
      task_id => "%{themeid}"
      code => "
          event.set('themetitle', map['themetitle']);
      "
      map_action => "update"
    }
  }
}

output {
    if "cassandra" in [tags] {
        elasticsearch {
            hosts => "https://elasticsearch:9200"
            ssl_enabled => true
            ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca.crt"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            index => "themes_index"
            document_id => "%{themeid}"
            action => "index"
        }
    }

    if "postgres" in [tags] {
        elasticsearch {
            hosts => "https://elasticsearch:9200"
            ssl_enabled => true
            ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca.crt"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            index => "users_index"
            document_id => "%{authorid}"
            action => "index"
        }
    }

    if "posts" in [tags] {
        elasticsearch {
            hosts => "https://elasticsearch:9200"
            ssl_enabled => true
            ssl_certificate_authorities => "/usr/share/logstash/config/certs/ca.crt"
            user => "${ELASTIC_USER}"
            password => "${ELASTIC_PASSWORD}"
            index => "posts_index"
            document_id => "%{postid}"
            action => "index"
        }
    }
}